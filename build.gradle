plugins {
    id 'org.jetbrains.kotlin.multiplatform' version "$kotlinVersion"
}

group 'net.codinux.log'
version '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}


kotlin {
    jvm {
        jvmToolchain(8)
        withJava()

        testRuns["test"].executionTask.configure {
            useJUnitPlatform()

            testLogging {     // This is for logging and can be removed.
                events("passed", "skipped", "failed")
            }
        }
    }

    js(IR) {
//        binaries.executable()

        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                    useFirefox()
                }
            }
        }

        nodejs()
    }

    ios {
        binaries {
            framework {
                baseName = "kLogger"
            }
        }
    }


    def hostOs = System.getProperty("os.name")
    def isMingwX64 = hostOs.startsWith("Windows")
    def nativeTarget
        if (hostOs == "Mac OS X") nativeTarget = macosX64('native')
        else if (hostOs == "Linux") nativeTarget = linuxX64("native")
        else if (isMingwX64) nativeTarget = mingwX64("native")
        else throw new FileNotFoundException("Host OS is not supported in Kotlin/Native.")

//    nativeTarget.with {
//        binaries {
//            executable {
//                entryPoint = 'main'
//            }
//        }
//    }


    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin("reflect")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin("test")
            }
        }


        jvmMain.dependencies {
            compileOnly "org.slf4j:slf4j-api:$slf4jVersion"
        }

        jvmTest.dependencies {
            implementation "org.assertj:assertj-core:$assertJVersion"
        }

        jsMain.dependencies {

        }

        iosMain.dependencies {

        }

        nativeMain.dependencies {

        }
    }
}